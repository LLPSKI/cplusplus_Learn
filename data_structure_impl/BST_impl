#ifndef BST_IMPL
#define BST_IMPL
#include<iostream>
#include"Base_Node"
using namespace std;
/*
    基本二叉搜索树实现
*/

template<typename Key_type,typename Value_type>
struct BST_Node : public Base_Node<Key_type,Value_type>
{
    //类型定义
    typedef BST_Node<Key_type,Value_type>* PNode_type;

    //成员变量
    PNode_type p,l,r;

    /*
        构造函数
        功能：将成员变量key赋值，p l r 指针设置为NULL
    */
    BST_Node(Key_type key);
};
template<typename Key_type,typename Value_type>
BST_Node<Key_type,Value_type>::BST_Node(Key_type key)
{
    this->key = key;
    this->l = NULL;
    this->p = NULL;
    this->r = NULL;
}

template<typename Key_type,typename Value_type,typename Node_type = BST_Node<Key_type,Value_type>>
struct BST
{
    //类型定义
    typedef Node_type* PNode_type;
    typedef Node_type* iterator;

    //成员变量
    unsigned int Node_Number;
    PNode_type T;

    /*
        功能：初始化成员变量，根指针为空，搜索树中结点个数为0
        实现：构造函数
    */
    BST();

    /*
        功能：返回当前搜索树中结点的个数
        传参：无
        返回值：结点的个数
    */
    unsigned int Current_Node_Number();

    /*
        功能：返回当前搜索树中根节点的地址
        传参：无
        返回值：结点的地址，如果搜索树为空则返回NULL
    */
    PNode_type Root();

    /*
        功能：二叉搜索树中序遍历
        实现方式：递归
        传参：本次递归处理的结点地址
        返回值：无
    */
    void In_Order_Traversal(PNode_type t);

    /*
        功能：根据所给关键字的值在搜索树中查找匹配的结点
        实现方式：递归
        传参：递归实现，从而需要传递本次递归处理的结点地址，以及关键字key的值
        返回值：如果查找成功，返回指向该结点的地址，反之查找失败返回NULL
    */
    PNode_type Search(PNode_type t,Key_type key);

    /*
        功能：搜索树中特定结点x的后继
        传参：特定节点x的地址
        返回值：结点x的后继结点地址
    */
    PNode_type Successor(PNode_type x);

    /*
        功能：搜索树中特定结点x的前驱
        传参：特定节点x的地址
        返回值：结点x的前驱结点地址
    */
    PNode_type Predecessor(PNode_type x);

    /*
        功能：返回以x为根的搜索树中的最大值结点
        传参：结点x的地址
        返回值：关键字最大的结点的地址
    */
    PNode_type Maximum(PNode_type x);

    /*
        功能：返回以x为根的搜索树中的最小值结点
        传参：结点x的地址
        返回值：关键字最小的结点的地址
    */
    PNode_type Minimum(PNode_type x);

    /*
        Insert函数
        功能：将关键字key先构造为结点z，再将z插入到搜索树中
        传参：关键字key
        返回值：结点z的地址
    */
    PNode_type Insert(Key_type key);

    /*
        功能：将结点z从搜索树中删除
        实现：结点z不能是NULL
        传参：结点z的地址
        返回值：删除成功返回true，反之返回false
    */
    bool Delete(PNode_type z);

    /*
        功能：将以结点为v的子树替换结点u的位置，其中u的指针不更改，且不进行释放
        实现：其中结点v可以是NULL，但结点u不能是NULL
        传参：结点u和v的地址
        返回值：替换成功返回true，反之出错返回false
    */
    bool Transplant(PNode_type u,PNode_type v);
};

template<typename Key_type,typename Value_type,typename Node_type>
BST<Key_type,Value_type,Node_type>::BST()
{
    this->T = NULL;
    this->Node_Number = 0;
    cout<<"搜索树初始化完成！\n";
}
template<typename Key_type,typename Value_type,typename Node_type>
void BST<Key_type,Value_type,Node_type>::In_Order_Traversal(PNode_type t)
{
    while(t)
    {
        cout<<"左 ";
        In_Order_Traversal(t->l);
        cout<<t->key<<' ';
        cout<<"右 ";
        In_Order_Traversal(t->r);
        return ;
    }
}
template<typename Key_type,typename Value_type,typename Node_type>
unsigned int BST<Key_type,Value_type,Node_type>::Current_Node_Number()
{
    return this->Node_Number;
}
template<typename Key_type,typename Value_type,typename Node_type>
typename BST<Key_type,Value_type,Node_type>::PNode_type BST<Key_type,Value_type,Node_type>::Root()
{
    return this->T;
}
template<typename Key_type,typename Value_type,typename Node_type>
typename BST<Key_type,Value_type,Node_type>::PNode_type BST<Key_type,Value_type,Node_type>::Search(PNode_type t,Key_type key)
{
    if(t == NULL || t->key == key)
    {
        return t;
    }
    if(t->key > key)
    {
        return this->Search(t->l,key);
    }else 
    {
        return this->Search(t->r,key);
    }
}
template<typename Key_type,typename Value_type,typename Node_type>
typename BST<Key_type,Value_type,Node_type>::PNode_type BST<Key_type,Value_type,Node_type>::Successor(PNode_type x)
{
    if(x->r)
    {
        return this->Minimum(x->r);
    }
    PNode_type y = x->p;
    while(y != NULL && x == y->r)
    {
        x = y;
        y = y->p;
    }
    return y;
}
template<typename Key_type,typename Value_type,typename Node_type>
typename BST<Key_type,Value_type,Node_type>::PNode_type BST<Key_type,Value_type,Node_type>::Predecessor(PNode_type x)
{
    if(x->l)
    {
        return this->Maximum(x->l);
    }
    PNode_type y = x->p;
    while(y != NULL && x == y->l)
    {
        x = y;
        y = y->p;
    }
    return y;
}
template<typename Key_type,typename Value_type,typename Node_type>
typename BST<Key_type,Value_type,Node_type>::PNode_type BST<Key_type,Value_type,Node_type>::Maximum(PNode_type x)
{
    while(x->r)
    {
        x = x->r;
    }
    return x;
}
template<typename Key_type,typename Value_type,typename Node_type>
typename BST<Key_type,Value_type,Node_type>::PNode_type BST<Key_type,Value_type,Node_type>::Minimum(PNode_type x)
{
    while(x->l)
    {
        x = x->l;
    }
    return x;
}
template<typename Key_type,typename Value_type,typename Node_type>
typename BST<Key_type,Value_type,Node_type>::PNode_type BST<Key_type,Value_type,Node_type>::Insert(Key_type key)
{
    PNode_type z = new Node_type(key);
    PNode_type x = this->T;
    PNode_type y = NULL;
    while(x)
    {
        y = x;
        if(z->key < x->key)
        {
            x = x->l;
        }
        else 
        {
            x = x->r;
        }
    }
    z->p = y;
    if(y == NULL)
    {
        this->T = z;
    }
    else if(z->key < y->key)
    {
        y->l = z;
    }
    else
    {
        y->r = z;
    }
    this->Node_Number++;
    return z;
}
template<typename Key_type,typename Value_type,typename Node_type>
bool BST<Key_type,Value_type,Node_type>::Delete(PNode_type z)
{
    if(z != NULL)
    {
        if(z->l == NULL)
        {
            this->Transplant(z,z->r);
            delete z;
        }
        else if(z->r == NULL)
        {
            this->Transplant(z,z->l);
            delete z;
        }
        else 
        {
            //进入此情况下，必然有后继
            PNode_type y = this->Successor(z);
            if(y->p != z)
            {
                this->Transplant(y,y->r);
                y->r = z->r;
                y->r->p = y;
            }
            this->Transplant(z,y);
            y->l = z->l;
            y->l->p = y;
            delete z;
        }
        this->Node_Number--;
        return true;
    }
    return false;
}
template<typename Key_type,typename Value_type,typename Node_type>
bool BST<Key_type,Value_type,Node_type>::Transplant(PNode_type u,PNode_type v)
{
    if(u != NULL)
    {
        if(u->p == NULL)
        {
            this->T = v;
        }
        else if(u->p->l == u)
        {
            u->p->l = v;
        }else 
        {
            u->p->r = v;
        }
        if(v != NULL)
        {
            v->p = u->p;
        }
        return true;
    }
    return false;
}
#endif