#ifndef HEAP_IMPL
#define HEAP_IMPL
#include<functional>
#include"Base_Node"
using namespace std;

/*
    数据结构：基本二叉堆
    继承：基类
    成员变量：
        1.指向根的指针T
        2.当前堆中的结点的个数
*/
template<typename Key_type,typename Value_type,typename Node_type = Base_Node<Key_type,Value_type>,
         typename Compare = greater<Key_type>>//默认是大根堆
struct Heap
{
    //类型定义
    typedef Value_type* PValue_type;
    typedef Node_type* PNode_type;
    typedef Node_type* iterator;

    //成员变量
    PNode_type T;
    unsigned int Current_Number;

    //成员函数
    /*
        
    */

    static size_t left(size_t i)
    {
        return 2*i+1;
    }
    static size_t right(size_t i)
    {
        return 2*(i+1);
    }
    static size_t parent(size_t i)
    {
        return (i-1)/2;
    }
    static void heapify(value_type*& arr,size_t i,size_t n,const compare& comp=compare())
    {
        size_t l=left(i);
        size_t r=right(i);
        size_t changed;
        if(l<n&&comp(arr[l],arr[i]))
        {
            changed=l;
        }else changed=i;
        if(r<n&&comp(arr[r],arr[changed]))
        {
            changed=r;
        }
        if(changed!=i)
        {
            swap(arr[i],arr[changed]);
            heapify(arr,changed,n);
        }
    }
    static void build_heap(value_type*& arr,size_t n,const compare& comp=compare())
    {
        for(int i=n/2;i>=0;i--)
        {
            heapify(arr,i,n,comp);
        }
    }
};

#endif