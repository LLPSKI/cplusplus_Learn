#ifndef KMP_IMPL
#define KMP_IMPL
template<typename Char_Type>
unsigned int* Compute_Prefix(Char_Type*& P,unsigned int m)
{
    unsigned int* PI = new unsigned int[m+1];
    PI[1] = 0;
    int k = 0;
    for(int q = 1;q < m;q++)
    {
        while(k > 0 && P[k+1] != P[q])
        {
            k = PI[k];
        }
        if(P[k+1] == P[q])
        {
            k++;
        }
        PI[q] = k;
    }
    return PI;
}

template<typename Char_Type>
void KMP(Char_Type*& P,unsigned int m,Char_Type*& T,unsigned int n)
{
    unsigned int* PI = Compute_Prefix<Char_Type>(P,m);
    int q = 0;
    for(int i = 0;i < n;i++)
    {
        while(q > 0 && P[q+1] != T[i])
        {
            q = PI[q];
        }
        if(P[q+1] == T[i])
        {
            q++;
        }
        if(q == m)
        {
            cout << "发现一次成功匹配！" << "此时s = " << i << '\n';
            q = PI[q];
        }
    }
}


#endif