#ifndef MATRIX_CHAIN_ORDER
#define MATRIX_CHAIN_ORDER
#include<iostream>
#include<fstream>
using namespace std;
/*
    函数名称：Matrix_Chain_Order
    传参：
        1. n表示矩阵链的长度，或者矩阵的个数；
        2. (p[0],p[1])表示第一个矩阵的大小，...(p[n-1],p[n])表示第n个矩阵的大小，其长度为n+1；
        3. m是一个二维n*n矩阵，其中m[i,j]表示Ai*...*Aj的最少乘法次数；
        4. s是一个二维n*n矩阵，其中s[i,j]表示Ai*...*Aj的最小乘法实现的划分点；
    返回值：无，通过m和s进行返回结果；
    功能：通过DP算法实现计算矩阵链乘最小次数的计算；
*/
void Matrix_Chain_Order(long long *& p,long long **& m,int **& s,int n)
{
    m = new long long*[n];
    s = new int*[n];
    for(int i = 0; i < n; i++)
    {
        m[i] = new long long[n];
        m[i][i] = 0;//对角线初始化，代表一个矩阵的乘法的代价为0
        s[i] = new int[n];
    }
    
    for (int l = 2; l <= n; l++)//最后一次应该计算m[0][n-1]
    {
        for(int i = 0; i < (n - l + 1); i++)//第一次循环应该计算的是m[0][1]到m[n-2][n-1]
        {
            int j = i + l - 1;
            m[i][j] = LONG_LONG_MAX;
            for(int k = i; k < j ; k++)
            {
                long long q = m[i][k] + m[k+1][j] + (p[i] * p[k+1] * p[j+1]);
                if(q < m[i][j])
                {
                    m[i][j] = q;
                    s[i][j] = k + 1;
                }
            }
        }
    }
}

/*
    函数名称：Print_Matrix_Chain_Order
    传参：结果矩阵s和范围i-j
    返回值：无
    实现方式：递归
*/
void Print_Matrix_Chain_Order(int**& s,int i,int j)
{
    fstream f;
    f.open("../output/2_1/result.txt",ios::out|ios::app);
    if(i == j)
    {
        f << "A" << (i + 1);
        f.close();
    }
    else
    {
        f << '(';
        f.close();
        Print_Matrix_Chain_Order(s,i,s[i][j]-1);
        Print_Matrix_Chain_Order(s,s[i][j],j);
        f.open("../output/2_1/result.txt",ios::out|ios::app);
        f << ')';
        f.close();
    }
}
#endif